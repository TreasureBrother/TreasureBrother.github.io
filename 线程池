ScheduledExecutorService常用方法如下:

1.<V> ScheduledFuture<V> schedule(Callable<V> callable, long delay, TimeUnit unit)
  延迟时间单位是unit,数量是delay的时间后执行callable。
2.ScheduledFuture<?> schedule(Runnable command, long delay, TimeUnit unit)
  延迟时间单位是unit,数量是delay的时间后执行command。
3.ScheduledFuture<?> scheduleAtFixedRate(Runnable command, long initialDelay, long period, TimeUnit unit)
  延迟时间单位是unit,数量是initialDelay的时间后,每间隔period时间重复执行一次command。
4.ScheduledFuture<?> scheduleWithFixedDelay(Runnable command, long initialDelay, long delay TimeUnit unit)
  创建并执行一个在给定初始延迟后首次启用的定期操作，随后，在每一次执行终止和下一次执行开始之间都存在给定
  的延迟。

ExecutorService接口是java内置的线程池接口,通过学习接口中的方法,可以快速的掌握java内置线程池的基本使用常用方法:

1.void shutdown()启动一次顺序关闭，执行以前提交的任务，但不接受新任务。
2.List<Runnable> shutdownNow()停止所有正在执行的任务，暂停处理正在等待的任务，并返回等待执行的任务列表。
3.<T> Future<T> submit(Callable<T> task)执行带返回值的任务，返回一个Future对象。
4.Future<?> submit(Runnable task)执行Runnable任务，并返回一个表示该任务的Future。
5.<T> Future<T> submit(Runnable task,T result)执行Runnable任务，并返回一个表示该任务的Future。

我们刚刚在学习java内置线程池使用时,没有考虑线程计算的结果,但开发中,我们有时需要利用线程进行一些计算,然后获取这些计算的结果而java中的Future接口就是专门用于描述异步计算结果的,
我们可似通过Future对象获取线程计算的结果;Future的常用方法如下(2与3用的比较多):
1.boolean cancel(boolean mayInterruptlfRunning)：试图取消对此任务的执行。
2.v get()：如有必要，等待计算完成，然后获取其结果。
3.v get(long timeout,TimeUnit unit)：如有必要，最多等待为使计算完成所给定的时间之后，获取其结果（如果结果可用)。
4.boolean isCancelled)：如果在任务正常完成前将其取消，则返回true。
5.boolean isDone()：如果任务已完成，则返回true。

